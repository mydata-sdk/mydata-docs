swagger: '2.0'

info:
  title: MyData - Middleware API
  description: |
    This API specification describes MyData Middleware API that can be used for accessing MyData Operator functionality. See [MyData documenttation](https://github.com/mydata-sdk/mydata-docs/tree/master/architecture_specs) for more details.
  version: '2.0'
  contact:
    url: 'https://github.com/mydata-sdk'
  license:
    name: 'MIT License (MIT)'
    url: 'https://opensource.org/licenses/MIT'
host: 127.0.0.1
schemes:
  - https

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  externalApiKeyAuth:
    type: apiKey
    name: Api-Key-User
    in: header
    description: Authentication using apiKey for external use

  BasicAuth:
    type: basic
    description: HTTP Basic Auth

paths:

  # create a new account
  /accounts/:
    post:
      summary: 'Create MyData Account'
      description: 'Create new MyData Account'

      parameters:
        - name: newAccount
          in: body
          description: 'Base information for account'
          required: true
          schema:
            $ref: '#/definitions/newAccountRequest'

      tags:
        - Account

      responses:
        '201':
          description: 'Success'
          schema:
            $ref: '#/definitions/newAccountResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Fetch MyData Account'
      description: 'Fetch MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - Account

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/accountResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
    #delete an account
    delete:
      security:
        - externalApiKeyAuth: []
      summary: 'Remove MyData Account'
      description: 'Remove MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - Account

      responses:
        '204':
          description: 'Success'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  # export an account
  /accounts/{account_id}/export/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Export MyData Account'
      description: 'Export MyData Account as JSON object'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - Account

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/accountExportResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/info/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Fetch Account Info object listing'
      description: 'Fetch Account Info object listing of MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - Info

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/AccountInfoResponseArray'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/info/{info_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Fetch Account Info object'
      description: 'Fetch Account Info object of MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: info_id
          in: path
          type: integer
          description: 'Account Info Object ID'
          required: true

      tags:
        - Info

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/AccountInfoResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

    patch:
      security:
        - externalApiKeyAuth: []
      summary: 'Update Account Info object'
      description: 'Update Account Info object of MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: info_id
          in: path
          type: integer
          description: 'Account Info ID'
          required: true
        - name: payload
          in: body
          description: 'Resource content'
          required: true
          schema:
            $ref: '#/definitions/AccountInfoRequest'

      tags:
        - Info

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/AccountInfoResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/logs/events/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Event Log listing'
      description: 'Fetch Event Log listing of MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - Event Log

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/EventLogArray'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  # get a list of service link records (SLR)
  /accounts/{account_id}/servicelinks/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Service Link listing'
      description: 'Fetch Service Link listing for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true

      tags:
        - MyData Service Link

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceLinksResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
            
    # NEW ENDPOINT: link a service, i.e. add a SLR to service links as the result
    post:
      security: 
        - externalApiKeyAuth: []
      summary: 'Link a service to MyData account'
      description: 'Link a service to MyData account. A Service Link Record and Service Link Status Record are created and stored in both the operator and the service.'
      
      parameters: 
        - name: account_id
          in: path
          description: 'the account id of the owner'
          required: true
          type: integer
        - name: serviceSummary
          in: body
          schema:
            $ref: '#/definitions/serviceSummary'
          description: 'should include at least the id of the service to be linked'
          required: true
          
      tags: 
        - Service Linking
        
      responses:
        '201':
          description: 'Linking suceeds, i.e. a Service Link Record and Service Link Status Record are created and should be stored in both the operator and the linked service. A service link status response could be delivered to the client as it contains the Service Link Record id and Service Link Status Record.'
          schema:
            $ref: '#/definitions/serviceLinkStatusResponse'
        '303':
          description: 'See Other. Redirect the user to the authentication of the service which the user intends to link to her/his MyData account'
          headers:
            location:
              type: string
              description: 'the URL of a login page of the linking service. It requires a GET request.'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
          
          

  # get a SLR
  /accounts/{account_id}/servicelinks/{servicelink_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Service Link'
      description: 'Fetch Service Link for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true

      tags:
        - MyData Service Link

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceLinkResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  # get SSRs for a linked service, SSR = Service Status Record
  /accounts/{account_id}/servicelinks/{servicelink_id}/statuses/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Service Link status listing'
      description: 'Fetch Service Link status listing for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true

      tags:
        - MyData Service Link

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceLinkStatusesResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
    # NEW ENDPOINT: unlink a service, i.e. create a new SSR with status marked REMOVED 
    post:
      security: 
        - externalApiKeyAuth: []
      summary: 'unlink a service'
      description: 'unlink a service by creating a new SSR with REMOVED status'
      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
      tags: 
        - Service Linking
      responses:
        '201':
          description: 'Unlinking suceeds, i.e. a SSR with status REMOVED is created and should be stored in both the operator and the unlinked service. A service link status response could be delivered to the client as it contains the Servivice Link Record id and Service Link Status Record.'
          schema:
            $ref: '#/definitions/serviceLinkStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
          
     
            
  # get a specific SSR for a linked service
  /accounts/{account_id}/servicelinks/{servicelink_id}/statuses/{status_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Service Link status'
      description: 'Fetch Service Link status for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: status_id
          in: path
          type: string
          description: 'Service link status ID'
          required: true

      tags:
        - MyData Service Link

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceLinkStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  # get the latest SSR for a linked service
  /accounts/{account_id}/servicelinks/{servicelink_id}/statuses/last/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Last Service Link status'
      description: 'Fetch last Service Link status for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service Link ID'
          required: true

      tags:
        - MyData Service Link

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceLinkStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
            
  # NEW ENDPOINT: the account owner requests the operator to create a consent form for two linked services
  /accounts/{account_id}/servicelinks/{servicelink_id}/consentForms/:
    post:
      security: 
        - externalApiKeyAuth: []
      summary: 'Generate a  consent form for two linked and compatible services'
      description: 'Request the operator to generate a consent form which contains a unique resource set ID and data sets to be sent to the sink.'
      
      parameters: 
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'the service link ID of the currently selected service'
          required: true
        - name: compatible_servicelink_id
          in: body
          description: 'the Service Link Record ID of the compatible service'
          required: true
          schema:
            type: object
            properties:
              compatible_servicelink_id:
                type: string
                description: 'the service link ID of the compatible service which the account owner wishes to establish data connection between the currently selected service.'
      
      tags:
        - Consenting
        
      responses:
        '200':
          description: 'Ok'
          schema:
            $ref: '#/definitions/consentForm'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
        
  /accounts/{account_id}/servicelinks/{servicelink_id}/consents/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Consent listing'
      description: 'Fetch Consent listing Service Link and for MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: get_consent_pair
          in: query
          type: boolean
          description: "If true also Consent pairs will be fetched"
          required: false

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentsResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
    # NEW ENDPOINT Give Consent
    post:
      security:
        - externalApiKeyAuth: []
      summary: 'Account owner gives consent to two compatible services'
      description: 'Give new consent to the selected linked service to send or receive data from the compatible linked service '

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'the service link ID of the currently selected service'
          required: true
        - name: consentForm
          in: body
          description: 'The client sends the consent form edited by the account owner back to the operator for creating new pair of CRs'
          required: true
          schema:
            $ref: '#/definitions/consentForm'
      
      tags:
        - Consenting
        
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/consentStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/servicelinks/{servicelink_id}/consents/{consent_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Consent'
      description: 'Fetch Consent for Service Link and MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: consent_id
          in: path
          type: string
          description: 'Consent ID'
          required: true
        - name: get_consent_pair
          in: query
          type: boolean
          description: "If true also Consent pairs will be fetched"
          required: false

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentsResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/servicelinks/{link_id}/consents/last/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Last Consent'
      description: 'Fetch last Consent for Service Link and MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: link_id
          in: path
          type: string
          description: 'Service Link ID'
          required: true
        - name: get_consent_pair
          in: query
          type: boolean
          description: "If true also Consent pairs will be fetched"
          required: false

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentsResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/servicelinks/{servicelink_id}/consents/{consent_id}/statuses/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Consent status listing'
      description: 'Fetch Consent status listing for Service Link and MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: consent_id
          in: path
          type: string
          description: 'Consent ID'
          required: true
        - name: status_id
          in: query
          type: string
          description: "Last valid Consent Status Record ID"
          required: false

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentStatusesResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
            
    # NEW ENDPOINT: change consent status
    post:
      security:
        - externalApiKeyAuth: []
      summary: 'Change consent status'
      description: 'Change consent status between active and disabled, or to set withdrawn status which is irreversible.'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: consent_id
          in: path
          type: string
          description: 'Consent ID'
          required: true
        - name: newConsentStatus
          in: body
          description: 'It contains new status for the new status record'
          required: true
          schema:
            type: object
            properties:
              newConsentStatus:
                type: string
                description: 'Value can be Active, Disabled or Withdrawn'
      
      tags:
        - Consenting
        
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/consentStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
    

  /accounts/{account_id}/servicelinks/{servicelink_id}/consents/{consent_id}/statuses/{status_id}/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Consent status'
      description: 'Fetch Consent status for Service Link and MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: servicelink_id
          in: path
          type: string
          description: 'Service link ID'
          required: true
        - name: consent_id
          in: path
          type: string
          description: 'Consent ID'
          required: true
        - name: status_id
          in: path
          type: string
          description: 'Status ID'
          required: true

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'

  /accounts/{account_id}/servicelinks/{link_id}/consents/{consent_id}/statuses/last/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Last Consent status'
      description: 'Fetch last Consent status for Service Link and MyData Account'

      parameters:
        - name: account_id
          in: path
          type: integer
          description: 'Account ID'
          required: true
        - name: link_id
          in: path
          type: string
          description: 'Service Link ID'
          required: true
        - name: consent_id
          in: path
          type: string
          description: 'Consent ID'
          required: true

      tags:
        - MyData Consent

      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/consentStatusResponse'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server errors'
          schema:
            $ref: '#/definitions/errors'
            
  # NEW ENDPOINT: GET a list of service with optional query parameters
  /services/:
    get:
      security:
        - externalApiKeyAuth: []
      summary: 'Get a list of services'
      description: 'Get a list of services from the service registry. Optional query parameters are available.'
      
      parameters:
        - name: account_id
          in: query
          type: integer
          description: 'required to identify currently linked services to an account. Front-end UI can add this info automatically in the query parameter.'
          required: true
        - name: serviceType
          in: query
          type: string
          description: 'value should be either sink or source'
          required: false
        - name: keywords
          in: query
          type: array
          collectionFormat: csv
          items:
            type: string
          description: 'string values are separated with comma'
          required: false
        - name: serviceProviderNames
          in: query
          type: array
          collectionFormat: csv
          items:
            type: string
          description: 'string values of serviceProvider.name'
          required: false
        - name: countries
          in: query
          type: array
          collectionFormat: csv
          items:
            type: string
          description: 'string values of serviceProvider.country'
          required: false
        - name: offset
          in: query
          type: integer
          minimum: 0
          default: 0
          description: 'the number of services to skip before starting to collect the result set. For pagination.'
          required: false
        - name: limit
          in: query
          type: integer
          minimum: 1
          maximum: 50
          default: 20
          description: 'the number of services to return. For pagenation.'
          required: false

      tags:
        - Services
        
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/serviceSummaries'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'        
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors' 
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/errors'        
            
  # NEW ENDPOINT: GET a list of compatible services for a specific service
  /services/{service_id}/compatibleServices/:
    get:
      security: 
        - externalApiKeyAuth: []
      summary: 'Get a list of compatible services for a specific service'
      
      parameters: 
        - name: service_id
          in: path
          type: string
          description: 'Required to get compatible services for a specific service'
          required: true
        - name: account_id
          in: query
          type: integer
          description: 'required to identify if a service is currently linked to an account. Front-end UI can add this info automatically in the query parameter.'
          required: true
      
      tags: 
        - Services
      
      responses:
        '200':
          description: 'Success'
          schema:
            # the first index can store the selected service and the following indexes for compatible services
            $ref: '#/definitions/serviceSummaries'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/errors'        
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/errors'
        '403':
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/errors' 
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/errors'      
      
          
  

definitions:

  errors:
    type: object
    properties:
      status:
        type: string
        description: 'HTTP status code as string value'
      code:
        type: integer
        description: 'HTTP status code'
      title:
        type: string
        description: 'Title of error message'
      detail:
        type: string
        description: 'Detailed error message'
      source:
        type: string
        description: 'Request target URI'

  apiKeyResponse:
    type: object
    properties:
      Api-Key:
        type: string
        description: 'Account Api Key to be used with API calls'
      account_id:
        type: string
        description: "Account ID"

  newAccount:
    type: object
    properties:
      type:
        type: string
        description: "Resource type 'Account'"
      attributes:
        type: object
        properties:
          username:
            type: string
            description: 'Account username'
            maxLength: 255
          password:
            type: string
            format: password
            description: 'Account password'
            maxLength: 255
            minLength: 8
          firstname:
            type: string
            description: "User's first name"
            maxLength: 255
          lastname:
            type: string
            description: "User's last name"
            maxLength: 255

  createdAccount:
    type: object
    properties:
      type:
        type: string
        description: "Resource type 'Account'"
      id:
        type: string
        description: "Account ID"
      attributes:
        type: object
        properties:
          activated:
            type: integer

  account:
    type: object
    properties:
      type:
        type: string
        description: "Resource type 'Account'"
      id:
        type: string
        description: "Account ID"
      attributes:
        type: object

  AccountInfo:
    type: object
    description: "Account info"
    properties:
      type:
        type: string
        description: "Resource type 'AccountInfo'"
      id:
        type: string
        description: "AccountInfo ID"
      attributes:
        type: object
        properties:
          firstname:
            type: string
            description: "First name"
          lastname:
            type: string
            description: "Last name"
          avatar:
            type: string
            description: 'Base64 avatar image'

  newAccountRequest:
    type: object
    properties:
      data:
        $ref: '#/definitions/newAccount'

  newAccountResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/createdAccount'

  accountResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/account'

  AccountInfoResponseArray:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/AccountInfo'

  AccountInfoResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/AccountInfo'

  AccountInfoRequest:
    type: object
    properties:
      data:
        $ref: '#/definitions/AccountInfo'

  jwk:
    type: object
    description: "Cryptographic key presented as JSON Web Key (JWK) as defined in RFC 7517"

  JWSUnprotectedHeader:
    type: object
    description: "JWS Unprotected Header as defined in RFC 7515"
    properties:
      kid:
        type: string
        description: "Key identifier"

  JWSProtectedHeader:
    type: string
    description: 'JWS Protected Header as defined in RFC 7515'
  
  # NEW DEFINITION: custom service object for front-end comsumption
  serviceSummary:
    type: object
    required:
      - service_id
      - isLinked
    description: 'A summary object containing relevant infomation about a service. The properties are extracted from the JSON objects of Service-Registry-Initialization'
    properties:
      service_id:
        type: string
        description: 'the id assigned by the service registry'
      serviceDescription:
        type: object
        properties:
          createdOnDate:
            type: integer
          serviceDescriptionTitle:
            type: string
          serviceIconURI:
            type: string
            description: 'https://example.come/350x150'
          serviceType:
            type: string
            description: 'source or sink'
          keywords:
            type: array
            description: 'keywords of the service'
            items:
              type: string
          serviceProvider:
            type: object
            properties:
              vatNumber:
                type: string
              name:
                type: string
              address1:
                type: string
              address2:
                type: string
              postalCode:
                type: string
              city:
                type: string
              state:
                type: string
              country:
                type: string
              contactEmail:
                type: string
              contactTel:
                type: string
              jurisdiction:
                type: string
          compatibleServices:
            type: array
            items:
              type: string
          maturity:
            type: string
          humanReadableDescription:
            type: object
            properties:
              humanReadableDescription:
                type: string
      # NEW PROPERTY
      isLinked:
        type: boolean
        description: 'return true if the service is linked to the requesting account'
      # NEW PROPERTY
      activeServicelink_id:
        type: string
        description: 'return the active service link record id if the service is linked to the requesting account' 
  
  # NEW DEFINITION:
  serviceSummaries:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/serviceSummary'
      
    

  # service link record
  serviceLink:
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'ServiceLinkRecord'"
      id:
        type: string
        description: "ID of resource"
      attributes:
        type: object
        description: 'Service Link Record as JSON Web Signature (JWS) as defined in RFC 7515'
        properties:
          payload:
            type: object
            description: 'JWS Payload. Base64url encoded. See MyData Architecture Specifications for more details.'
            properties:
              version:
                type: string
              link_id:
                type: string
              operator_id:
                type: string
              service_id:
                type: string
              surrogate_id:
                type: string
              operator_key:
                $ref: '#/definitions/jwk'
              cr_keys:
                description: 'JSON Web Key (JWK) Set Structure '
                type: array
                items:
                  $ref: '#/definitions/jwk'
              iat:
                type: integer
                format: int32
          signatures:
            type: array
            items:
              type: object
              properties:
                header:
                  $ref: '#/definitions/JWSUnprotectedHeader'
                protected:
                  $ref: '#/definitions/JWSProtectedHeader'
                signature:
                  type: string
                  description: "JWS Signature"


  serviceLinksResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/serviceLink'


  serviceLinkResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/serviceLink'


  serviceLinkStatus:
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'ServiceLinkStatusRecord'"
      id:
        type: string
        description: "ID of resource"
      attributes:
        type: object
        description: 'Service Link Status Record as JSON Web Signature (JWS) as defined in RFC 7515'
        properties:
          header:
            $ref: '#/definitions/JWSUnprotectedHeader'
          protected:
            $ref: '#/definitions/JWSProtectedHeader'
          payload:
            type: object
            description: 'JWS Payload. Base64url encoded. See MyData Architecture Specifications for more details.'
            properties:
              version:
                type: string
              record_id:
                type: string
              surrogate_id:
                type: string
              slr_id:
                type: string
              sl_status:
                type: string
              iat:
                type: integer
                format: int32
              prev_record_id:
                type: string
          signature:
            type: string
            description: "JWS Signature"


  serviceLinkStatusesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/serviceLinkStatus'


  serviceLinkStatusResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/serviceLinkStatus'

  # NEW DEFINITION
  consentForm:
    type: object
    properties: 
      source_service_id:
        type: string
      sink_service_id:
        type: string
      # See Resource Set description from MyData Authorisation spec 1.3
      rs_id:
        type: string
      dataset:
        type: array
        items:
          type: object
          properties:
            dataset_id:
              type: string
            distribution_id:
              type: string
            distribution_url:
              type: string
      # level of permission, not in the original resource set properties:
      permission_level:
        type: integer
        description: 'The account owner specifies whether the sink can use received data for purposes other than the core operation'
      
  
  consent:
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'ConsentRecord'"
      id:
        type: string
        description: "ID of resource"
      attributes:
        type: object
        description: 'Consent Record as JSON Web Signature (JWS) as defined in RFC 7515'
        properties:
          header:
            $ref: '#/definitions/JWSUnprotectedHeader'
          protected:
            $ref: '#/definitions/JWSProtectedHeader'
          payload:
            type: 'object'
            description: 'Base64 encoded object containing either Consent Payload of Source Service or Consent Payload of Sink Service. See MyData Architecture Specifications for more details.'
          signature:
            type: string
            description: "JWS Signature"


  consentsResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/consent'

  consentStatusPayload:
    type: object
    description: 'Consent Status Record Payload. See MyData Architecture Specifications for more details.'
    properties:
      version:
        type: string
      record_id:
        type: string
      surrogate_id:
        type: string
      cr_id:
        type: string
      consent_status:
        type: string
      iat:
        type: integer
        format: int32
      prev_record_id:
        type: string

  consentStatus:
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'ConsentStatusRecord'"
      id:
        type: string
        description: "ID of resource"
      attributes:
        type: object
        description: 'Consent Status Record as JSON Web Signature (JWS) as defined in RFC 7515'
        properties:
          header:
            $ref: '#/definitions/JWSUnprotectedHeader'
          protected:
            $ref: '#/definitions/JWSProtectedHeader'
          payload:
            $ref: '#/definitions/consentStatusPayload'
          signature:
            type: string
            description: "JWS Signature"


  consentStatusesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/consentStatus'


  consentStatusResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/consentStatus'

  EventLog:
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'Event'"
      id:
        type: string
        description: "ID of resource"
      attributes:
        description: "See MyData Architecture Specifications for more details."
        type: object
        properties:
          action:
            type: string
            description: "HTTP Method"
          actor:
            type: string
            description: "Actor during event"
          resource:
            type: string
            description: "Resource accessed"
          timestamp:
            type: string
            description: "Timestamp of event as ISO 8601 formatted string"

  EventLogArray:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/EventLog'


  accountExportResponse:
    description: "See MyData Architecture Specifications for more details."
    type: object
    properties:
      type:
        type: string
        description: "Resource type: 'AccountExport'"
      id:
        type: string
        description: "ID of resource"
      gid:
        type: string
        description: "Global ID of resource"
      attributes:
        type: object
        properties:
          account_info:
            type: array
            items:
              $ref: '#/definitions/AccountInfo'
          event_logs:
            type: array
            items:
              $ref: '#/definitions/EventLog'
          service_links:
            type: object
            properties:
              type:
                type: string
                description: "Resource type: 'ServiceLinkRecord'"
              id:
                type: string
                description: "ID of resource"
              attributes:
                type: object
                description: 'Service Link Record as JSON Web Signature (JWS) as defined in RFC 7515'
                properties:
                  payload:
                    type: object
                    description: 'JWS Payload. Base64url encoded. See MyData Architecture Specifications for more details.'
                    properties:
                      version:
                        type: string
                      link_id:
                        type: string
                      operator_id:
                        type: string
                      service_id:
                        type: string
                      surrogate_id:
                        type: string
                      operator_key:
                        $ref: '#/definitions/jwk'
                      cr_keys:
                        description: 'JSON Web Key (JWK) Set Structure '
                        type: array
                        items:
                          $ref: '#/definitions/jwk'
                      iat:
                        type: integer
                        format: int32
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        header:
                          $ref: '#/definitions/JWSUnprotectedHeader'
                        protected:
                          $ref: '#/definitions/JWSProtectedHeader'
                        signature:
                          type: string
                          description: "JWS Signature"
              status_records:
                type: array
                items:
                  $ref: '#/definitions/serviceLinkStatus'
              consent_records:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      description: "Resource type: 'ConsentRecord'"
                    id:
                      type: string
                      description: "ID of resource"
                    attributes:
                      type: object
                      description: 'Consent Record as JSON Web Signature (JWS) as defined in RFC 7515'
                      properties:
                        header:
                          $ref: '#/definitions/JWSUnprotectedHeader'
                        protected:
                          $ref: '#/definitions/JWSProtectedHeader'
                        payload:
                          type: 'object'
                          description: 'Base64 encoded object containing either Consent Payload of Source Service or Consent Payload of Sink Service. See MyData Architecture Specifications for more details.'
                        signature:
                          type: string
                          description: "JWS Signature"
                    status_records:
                      type: array
                      items:
                        $ref: '#/definitions/consentStatus'